name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        pip install -e .
    
    - name: Run tests
      run: python -m unittest discover tests

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

  build-package:
    needs: [test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    
    - name: Update version in pyproject.toml
      run: |
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
    
    - name: Build package
      run: python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/

  publish-to-pypi:
    needs: [build-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install twine
      run: pip install twine
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload dist/*

  update-github-release:
    needs: [build-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist/
    
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    
    - name: Find wheel file
      id: find_wheel
      run: |
        WHEEL_FILE=$(find dist/ -name "*.whl" | head -n 1)
        echo "WHEEL_FILE=$WHEEL_FILE" >> $GITHUB_ENV
        echo "WHEEL_NAME=$(basename $WHEEL_FILE)" >> $GITHUB_ENV
    
    - name: Find source distribution
      id: find_sdist
      run: |
        SDIST_FILE=$(find dist/ -name "*.tar.gz" | head -n 1)
        echo "SDIST_FILE=$SDIST_FILE" >> $GITHUB_ENV
        echo "SDIST_NAME=$(basename $SDIST_FILE)" >> $GITHUB_ENV
    
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ env.WHEEL_FILE }}
        asset_name: ${{ env.WHEEL_NAME }}
        asset_content_type: application/octet-stream
    
    - name: Upload sdist to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ env.SDIST_FILE }}
        asset_name: ${{ env.SDIST_NAME }}
        asset_content_type: application/gzip

